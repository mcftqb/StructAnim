{
	// Place your StructuresAnimator workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New Empty Args" : {
		"prefix": "newArgs",
		"body": [
			"function struct_anim:utils/args/new",
			"$0"
		]
	},
	"New Args {}" : {
		"prefix": "argsOf",
		"body": [
			"function struct_anim:utils/args/of {args: {$0}}"
		]
	},
	"Log error" : {
		"prefix": "logError",
		"body": [
			"function struct_anim:utils/log/error {text: \"$1\", trace: \"$2\"}",
			"$0"
		]
	},
	"Set temp var" : {
		"prefix": "setTmp",
		"body": [
			"data remove storage struct_anim:utils root.tmp",
			"data modify storage struct_anim:utils root.tmp set from storage $1 $2",
			"$0"
		]
	},
	"Get temp var" : {
		"prefix": "getTmp",
		"body": [
			"storage struct_anim:utils root.tmp",
			"$0"
		]
	},
	"Select array element" : {
		"prefix": "arraySelect",
		"body": [
			"data modify storage struct_anim:utils root.ctx.array_select set value {storage: \"\", path: \"\", filter: {}}",
			"data modify storage struct_anim:utils root.ctx.array_select.filter.$1 set from $2",
			"function struct_anim:utils/array/select with storage struct_anim:utils root.ctx.array_select"
		]
	},
	"Upsert array element" : {
		"prefix": "arrayUpsert",
		"body": [
			"data modify storage struct_anim:utils root.ctx.array_upsert set value {storage: \"\", path: \"\", filter: {}, value_path:\"\", value: {}}",
			"data modify storage struct_anim:utils root.ctx.array_upsert.filter.$1 set from $2",
			"data modify storage struct_anim:utils root.ctx.array_upsert.value.$1 set from $2",
			"function struct_anim:utils/array/upsert with storage struct_anim:utils root.ctx.array_upsert"
		]
	},
	"Function Arguments" : {
		"prefix": "uArgs",
		"body": [
			"storage struct_anim:utils root.args.$0"
		]
	},
	"Function Result Return" : {
		"prefix": "uReturn",
		"body": [
			"storage struct_anim:utils root.return.$0"
		]
	},
	"Macro-function context" : {
		"prefix": "uCtx",
		"body": [
			"storage struct_anim:utils root.ctx.$0"
		]
	},
	"showError" : {
		"prefix": "errShow",
		"body": [
			"function struct_anim:utils/error/show {e:[\"$0\"]}"
		]
	},
	"checkError" : {
		"prefix": "errCheck",
		"body": [
			"execute unless score #is_error struct_anim.int matches 0 run return 0",
			"$0"
		]
	},
	"forEach" : {
		"prefix": "forEach",
		"body": [
			"data modify storage ${1:struct_anim:utils} ${2:root.args.} set value []",
			"execute unless data storage $1 $2[0] run return 0",
			"",
			"# Any step code here",
			"function  with storage $1 $2[0]",
			"",
			"data remove storage $1 $2[0]",
			"function "
		]
	}
}